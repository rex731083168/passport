package cn.easywed.stargate.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.easywed.stargate.common.util.JsonUtil;
import cn.easywed.stargate.dao.persistence.Auth;
import cn.easywed.stargate.dao.persistence.RRoleAuth;
import cn.easywed.stargate.dao.persistence.SysInfo;
import cn.easywed.stargate.service.IAuthService;
import cn.easywed.stargate.service.IRerationService;
import cn.easywed.stargate.service.ISysInfoService;
import cn.easywed.stargate.service.IUserService;

@RequestMapping("/auth")
@Controller
public class AuthController {

	@Resource
	IUserService userService;

	@Resource
	IAuthService authService;

	@Resource
	ISysInfoService sysInfoService;

	@Resource
	IRerationService rerationService;

	@RequestMapping("/getAuths")
	@ResponseBody
	public String getAuths(String authName, String systemId, String isvalid) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");

		Map condition = new HashMap();
		condition.put("authName", authName);
		condition.put("systemId", systemId);
		condition.put("isvalid", isvalid);

		List<Auth> authList = authService.getAuths(condition);
		retMap.put("authList", authList);

		return JsonUtil.toJson(retMap);

	}

	@RequestMapping("/authIndex")
	@ResponseBody
	public String index(HttpServletRequest request, HttpSession session) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 1);
		retMap.put("msg", "ok");

		List<SysInfo> sysInfo = sysInfoService.getSysInfo();
		retMap.put("data", sysInfo);
		return JsonUtil.toJson(retMap);
	}

	@RequestMapping("/addAuth")
	@ResponseBody
	public String addAuth(String authName, String url, String systemId) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		if (systemId == null || "".equals(systemId)) {
			retMap.put("code", 1);
			retMap.put("msg", "systemId is required");
		}
		int belongSys = Integer.valueOf(systemId);
		Date date = new Date();
		Auth auth = new Auth();
		auth.setAuthName(authName);
		auth.setUrl(url);
		auth.setBelongSys(belongSys);
		auth.setCreateTime(date);
		auth.setIsvalid(0);
		auth.setStatus(0);
		int ret = authService.addAuth(auth);
		if (ret == 0) {
			retMap.put("code", 0);
			retMap.put("msg", "insert auth failed");
			return JsonUtil.toJson(retMap);
		}

		retMap.put("auth", auth);
		return JsonUtil.toJson(retMap);

	}

	/**
	 * 获取权限
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/getAuth")
	@ResponseBody
	public String getAuth(HttpServletRequest request, String authId) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		long authid = Integer.parseInt(authId);

		Auth auth = authService.getById(authid);
		List<SysInfo> sysInfo = sysInfoService.getSysInfo();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("sysInfo", sysInfo);
		dataMap.put("auth", auth);

		retMap.put("data", dataMap);
		return JsonUtil.toJson(retMap);

	}

	@RequestMapping("/updateAuth")
	@ResponseBody
	public String updateAuth(long authId, String authName, String url, String systemId) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		int belongSys = Integer.valueOf(systemId);
		Auth auth = new Auth();
		auth.setAuthId(authId);
		auth.setAuthName(authName);
		auth.setUrl(url);
		auth.setBelongSys(belongSys);

		int i = authService.updateAuth(auth);
		if (i == 0) {
			retMap.put("code", 1);
			retMap.put("msg", "updateFailed");
			return JsonUtil.toJson(retMap);
		}

		retMap.put("auth", auth);
		return JsonUtil.toJson(retMap);

	}

	/**
	 * 获取授权页初始化数据
	 * 
	 * @return
	 */
	@RequestMapping("/getAllAuths")
	@ResponseBody
	public String getAllAuths(long roleId) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");

		List<Object> resList = new ArrayList<Object>();
		
		// 根据角色获取当前权限
		List<RRoleAuth> roleAuthList = rerationService.getByRoleId(roleId);

		// 获取全部系统
		List<SysInfo> sysInfo = sysInfoService.getSysInfo();

		// 根据系统获取权限列表
		for (int i = 0; i < sysInfo.size(); i++) {

			List<Object> sysAuthList = new ArrayList<Object>();
			Map<String, Object> condition = new HashMap<String, Object>();

			// 单个系统下的权限列表
			List<Object> sysAuth = new ArrayList<Object>();
			condition.put("systemId", sysInfo.get(i).getId());
			List<Auth> authList = authService.getAuths(condition);
			String sysName = sysInfo.get(i).getSysName();
			for (int j = 0; j < authList.size(); j++) {
				Map<String, Object> authMap = new HashMap<String, Object>();
				authMap.put("authId", authList.get(j).getAuthId());
				authMap.put("authName", authList.get(j).getAuthName());
				// 确认是否已授权，前端显示是否check
				boolean flag = false;
				for (int k = 0; k < roleAuthList.size(); k++) {
					if (authList.get(j).getAuthId() == roleAuthList.get(k).getAuthId())
						flag = true;
				}
				if (flag) {
					authMap.put("isChecked", true);
				} else {
					authMap.put("isChecked", false);

				}
				sysAuth.add(authMap);

			}
			sysAuthList.add(sysInfo.get(i).getId());
			sysAuthList.add(sysName);
			sysAuthList.add(sysAuth);

			resList.add(sysAuthList);
		}

		retMap.put("authList", resList);

		return JsonUtil.toJson(retMap);

	}
	
	
	/**
	 * 获取权限级联菜单
	 * 
	 * @return
	 */
	@RequestMapping("/getDropdown")
	@ResponseBody
	public String getDropdown(long parentId) {
		
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		List<Auth> authList=authService.getByParentId(parentId);
		retMap.put("authList", authList);
		return JsonUtil.toJson(retMap);

	}
}
