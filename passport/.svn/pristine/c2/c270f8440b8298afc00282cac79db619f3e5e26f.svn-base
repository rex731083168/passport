package cn.easywed.stargate.controller;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import cn.easywed.stargate.common.util.JsonUtil;
import cn.easywed.stargate.common.util.MD5Util;
import cn.easywed.stargate.dao.persistence.Department;
import cn.easywed.stargate.dao.persistence.RUserRole;
import cn.easywed.stargate.dao.persistence.Role;
import cn.easywed.stargate.dao.persistence.User;
import cn.easywed.stargate.service.IDepartmentService;
import cn.easywed.stargate.service.IRerationService;
import cn.easywed.stargate.service.IRoleService;
import cn.easywed.stargate.service.IUserService;

@RequestMapping("/")
@Controller
public class UserController {

	@Resource
	IUserService userService;

	@Resource
	IRoleService roleService;

	@Resource
	IDepartmentService departmentService;

	@Resource
	IRerationService rerationService;

	@RequestMapping(value = "/getUsers", method = { RequestMethod.POST })
	@ResponseBody
	public String getUsers(String username, String departmentId, String isvalid) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		Map condition = new HashMap();

		condition.put("username", username);
		condition.put("department", departmentId);
		condition.put("isvalid", isvalid);

		// 获取列表
		List<User> userList = userService.getUsers(condition);
		// 获取部门
		List<Department> department = departmentService.getDepartment();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("userList", userList);
		dataMap.put("department", department);

		retMap.put("data", dataMap);
		return JsonUtil.toJson(retMap);

	}

	/**
	 * 路由页
	 * 
	 * @param request
	 * @param session
	 * @return
	 */
	@RequestMapping("/getBaseInfo")
	@ResponseBody
	public String getBaseInfo(HttpServletRequest request, HttpSession session) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");
		List<Role> roles = roleService.getRoles(new HashMap());

		List<Department> department = departmentService.getDepartment();
		Map<String, Object> dataMap = new HashMap<String, Object>();
		dataMap.put("roles", roles);
		dataMap.put("department", department);
		retMap.put("data", dataMap);

		return JsonUtil.toJson(retMap);
	}

	/**
	 * 注册 POST
	 * 
	 * @throws Exception
	 */
	@RequestMapping(value = "/register", method = { RequestMethod.POST })
	@ResponseBody
	public String register(String username, String mobile, String password, String departId, String roles) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");

		User user = new User();
		user.setUsername(username);
		user.setMobile(mobile);
		String pw = MD5Util.MD5(password);
		user.setPassword(pw);
		// throw exception
		if (departId != null && !"".equals(departId)) {
			user.setDepartment(Integer.parseInt(departId));
		}

		Date date = new Date();
		user.setCreattime(date);

		user.setStatus(0);

		// 注册新用户
		int ret = userService.register(user);
		if (ret == 0) {
			retMap.put("code", 1);
			retMap.put("msg", "insert user failed");
		}
		// 为新用户绑定角色
		long uid = user.getId();

		String role[] = null;
		// 为新用户绑定角色
		if (roles != null && !"".equals(roles)) {
			role = roles.split(",");
		}

		RUserRole rUserRole = new RUserRole();
		rUserRole.setUid(uid);

		if (role != null && !"".equals(role)) {

			for (int i = 0; i < role.length; i++) {

				rUserRole.setRoleId(Integer.valueOf(role[i]));
				rerationService.addUserRole(rUserRole);
			}

		}
		return JsonUtil.toJson(retMap);

	}

	/**
	 * 修改密码 POST
	 * 
	 * @throws Exception
	 */
	@RequestMapping(value = "/changePassword", method = { RequestMethod.POST })
	public String changePassword(String oldPassword, String mobile, String newPassword) {

		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "修改密码成功");

		Map<String, Object> dataMap = new HashMap<String, Object>();

		try {
			// 验证旧用户密码
			User userInfo = userService.getUserInfo(mobile, oldPassword);
			if (userInfo == null) {
				retMap.put("code", 1);
				retMap.put("msg", "mobile password is wrong");
				return JsonUtil.toJson(retMap);
			}
			// 更新密码
			User user = new User();
			user.setMobile(mobile);
			String password = MD5Util.MD5(newPassword);
			user.setPassword(password);
			userService.updateUser(user);

		} catch (NumberFormatException e) {
			retMap.put("code", 4);
			retMap.put("msg", "input param error");
			return JsonUtil.toJson(retMap);
		}

		return JsonUtil.toJson(retMap);

	}

	/**
	 * 
	 * @param username
	 * @param mobile
	 * @param password
	 * @param departId
	 * @param roles
	 * @return
	 */
	@RequestMapping(value = "/updateUser", method = { RequestMethod.POST })
	@ResponseBody
	public String updateUser(String userId, String username, String mobile, String departId, String roles) {
		Map<String, Object> retMap = new HashMap<String, Object>();
		retMap.put("code", 0);
		retMap.put("msg", "ok");

		User user = new User();
		if (userId == null && "".equals(userId)) {
			retMap.put("code", 4);
			retMap.put("msg", "parameta error");
		}
		int uid = Integer.parseInt(userId);
		user.setId(uid);
		user.setUsername(username);
		user.setMobile(mobile);
		if (departId != null && !"".equals(departId)) {
			user.setDepartment(Integer.parseInt(departId));
		}

		// 更新
		int ret = userService.updateUser(user);
		if (ret == 0) {
			retMap.put("code", 1);
			retMap.put("msg", "insert user failed");
		}

		String role[] = null;
		// 为新用户绑定角色
		if (roles != null && !"".equals(roles)) {
			role = roles.split(",");
		}

		RUserRole rUserRole = new RUserRole();
		rUserRole.setUid(uid);

		// 删除旧角色
		rerationService.deleteRolebyUid(uid);

		if (role != null && !"".equals(role)) {
			for (int i = 0; i < role.length; i++) {

				rUserRole.setRoleId(Integer.valueOf(role[i]));
				rerationService.addUserRole(rUserRole);
			}
		}
		return JsonUtil.toJson(retMap);

	}

}
